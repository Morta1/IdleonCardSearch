{"version":3,"file":"static/chunks/pages/account/world-3/buildings-43398f4e2708fcf1.js","mappings":"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","sources":["webpack://_N_E/?4bd5","webpack://_N_E/./components/common/Timer/index.jsx","webpack://_N_E/./components/common/styles.jsx","webpack://_N_E/./pages/account/world-3/buildings.jsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/account/world-3/buildings\",\n      function () {\n        return require(\"private-next-pages/account/world-3/buildings.jsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/account/world-3/buildings\"])\n      });\n    }\n  ","import { forwardRef, useEffect, useState } from 'react';\nimport useInterval from 'components/hooks/useInterval';\nimport { isPast } from 'date-fns';\nimport { getDuration } from 'utility/helpers';\nimport { Typography } from '@mui/material';\nconst Timer = forwardRef(({\n  date,\n  startDate,\n  lastUpdated,\n  stopAtZero,\n  type,\n  pause,\n  staticTime,\n  placeholder,\n  loop,\n  variant = 'inherit',\n  ...rest\n}, ref) => {\n  const [time, setTime] = useState();\n  useEffect(() => {\n    if (date) {\n      if (staticTime) {\n        if (!isFinite(date)) return;\n        let duration = getDuration(new Date().getTime(), date);\n        return setTime({\n          ...duration\n        });\n      }\n      const tempTime = new Date();\n      const timePassed = tempTime.getTime() - (lastUpdated ?? 0);\n      const dateIsInPast = isPast(date);\n      let duration = getDuration(tempTime?.getTime(), date + timePassed * (type === 'countdown' ? -1 : 1));\n      setTime({\n        ...duration,\n        overtime: type === 'countdown' ? dateIsInPast : false\n      });\n    }\n  }, [date, lastUpdated]);\n  const tickUp = () => {\n    let {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = time;\n    seconds += 1;\n    if (seconds === 60) {\n      seconds = 0;\n      minutes += 1;\n      if (minutes === 60) {\n        minutes = 0;\n        hours += 1;\n        if (hours === 24) {\n          days += 1;\n        }\n      }\n    }\n    setTime({\n      ...time,\n      days,\n      hours,\n      minutes,\n      seconds\n    });\n  };\n  const tickDown = () => {\n    let {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = time;\n    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {\n      if (stopAtZero) {\n        return;\n      }\n      if (loop) {\n        let duration = getDuration(new Date().getTime(), startDate);\n        return setTime({\n          ...duration\n        });\n      }\n      return;\n    }\n    seconds -= 1;\n    if (seconds === -1) {\n      seconds = 59;\n      minutes -= 1;\n      if (minutes === -1) {\n        minutes = 59;\n        hours -= 1;\n        if (hours === -1) {\n          hours = 0;\n          days -= 1;\n        }\n      }\n    }\n    setTime({\n      ...time,\n      days,\n      hours,\n      minutes,\n      seconds\n    });\n  };\n  useInterval(() => {\n    if (!time) return null;\n    if (type === 'countdown' && !time?.overtime) {\n      tickDown();\n    } else {\n      tickUp();\n    }\n  }, !pause && !staticTime ? 1000 : null);\n  const wrapNumber = number => {\n    const strNumber = String(number);\n    return strNumber?.length === 1 ? `0${number}` : number;\n  };\n  return time ? (time?.overtime || pause) && placeholder ? <Typography {...rest} ref={ref}>{placeholder}</Typography> : <Typography {...rest} ref={ref} variant={variant} sx={{\n    color: `${time?.overtime && !loop ? '#f91d1d' : ''}`\n  }} component={'span'}>\n      {time?.days ? wrapNumber(time?.days) + 'd:' : ''}\n      {wrapNumber(time?.hours) + 'h:'}\n      {wrapNumber(time?.minutes) + `m`}\n      {!time?.days ? ':' : ''}\n      {!time?.days ? wrapNumber(time?.seconds) + 's' : ''}\n    </Typography> : null;\n});\nexport default Timer;","import React, { forwardRef } from 'react';\nimport { cleanUnderscore, growth, notateNumber, numberWithCommas, prefix } from 'utility/helpers';\nimport { Badge, Card, CardContent, Divider, Stack, Typography } from '@mui/material';\nimport styled from '@emotion/styled';\nimport Tooltip from '../Tooltip';\nimport { calcCardBonus } from 'parsers/cards';\nexport const IconWithText = forwardRef((props, ref) => {\n  const {\n    stat,\n    icon,\n    img,\n    title = '',\n    ...rest\n  } = props;\n  return <Tooltip title={title}>\n    <Stack alignItems={'center'} {...rest} ref={ref} style={{\n      position: 'relative',\n      width: 'fit-content'\n    }}>\n      <img {...img} src={`${prefix}data/${icon}.png`} alt=\"\" />\n      <Typography variant={'body1'} component={'span'}>{stat}</Typography>\n    </Stack>\n  </Tooltip>;\n});\nIconWithText.displayName = 'IconWithText';\nexport const TitleAndValue = ({\n  title,\n  value,\n  boldTitle,\n  titleStyle = {},\n  valueStyle = {}\n}) => {\n  return <Stack direction={'row'} flexWrap={'wrap'} alignItems={'center'} data-sentry-element=\"Stack\" data-sentry-component=\"TitleAndValue\" data-sentry-source-file=\"styles.jsx\">\n    {title ? <Typography sx={titleStyle} fontWeight={boldTitle ? 'bold' : 500} component={'span'}>{title}:&nbsp;</Typography> : null}\n    <Typography fontSize={15} component={'span'} sx={valueStyle} data-sentry-element=\"Typography\" data-sentry-source-file=\"styles.jsx\">{value}</Typography>\n  </Stack>;\n};\nexport const StyledBadge = styled(Badge)`\n  & .MuiBadge-badge {\n    background-color: #d5d5dc;\n    color: rgba(0, 0, 0, 0.87);\n  }\n`;\nexport const CardAndBorder = cardProps => {\n  const {\n    cardName,\n    stars,\n    cardIndex,\n    name,\n    variant,\n    rawName,\n    amount,\n    nextLevelReq\n  } = cardProps;\n  const iconSrc = variant === 'cardSet' ? `${prefix}data/${rawName}.png` : `${prefix}data/2Cards${cardIndex}.png`;\n  const realCardName = variant === 'cardSet' ? name : cardName;\n  return <>\n    {stars > 0 ? <BorderIcon src={`${prefix}data/CardEquipBorder${stars}.png`} alt=\"\" /> : null}\n    <Tooltip title={<CardTooltip {...{\n      ...cardProps,\n      cardName: realCardName,\n      nextLevelReq,\n      amount\n    }} />} data-sentry-element=\"Tooltip\" data-sentry-source-file=\"styles.jsx\">\n      <CardIcon isCardSet={variant === 'cardSet'} amount={amount} src={iconSrc} alt=\"\" data-sentry-element=\"CardIcon\" data-sentry-source-file=\"styles.jsx\" />\n    </Tooltip>\n  </>;\n};\nconst CardTooltip = ({\n  displayName,\n  effect,\n  bonus,\n  stars,\n  showInfo,\n  nextLevelReq,\n  amount\n}) => {\n  let realBonus = bonus;\n  if (showInfo) {\n    realBonus = calcCardBonus({\n      bonus,\n      stars\n    });\n  }\n  return <>\n    <Typography fontWeight={'bold'} variant={'h6'} data-sentry-element=\"Typography\" data-sentry-source-file=\"styles.jsx\">{cleanUnderscore(displayName)}</Typography>\n    <Typography data-sentry-element=\"Typography\" data-sentry-source-file=\"styles.jsx\">{cleanUnderscore(effect.replace('{', realBonus))}</Typography>\n    {showInfo ? <Stack mt={1} direction={'row'} gap={1} flexWrap={'wrap'}>\n      {[1, 2, 3, 4, 5, 6].map((_, index) => {\n        return <Stack key={`${displayName}-${index}`} alignItems={'center'} justifyContent={'space-between'}>\n          {index === 0 ? <Typography>Base</Typography> : <StarIcon src={`${prefix}etc/Star${index}.png`} alt=\"\" />}\n          <Typography>{bonus * (index + 1)}</Typography>\n        </Stack>;\n      })}\n    </Stack> : null}\n    {amount >= nextLevelReq ? <Stack>You've collected {numberWithCommas(amount)} cards</Stack> : nextLevelReq > 0 ? <Stack>\n        Progress: {numberWithCommas(amount)} / {numberWithCommas(nextLevelReq)}\n      </Stack> : null}\n  </>;\n};\nconst StarIcon = styled.img`\n  height: 20px;\n  object-fit: contain;\n`;\nconst CardIcon = styled.img`\n  width: 56px;\n  height: 72px;\n  object-fit: contain;\n  opacity: ${({\n  amount,\n  isCardSet\n}) => !amount && !isCardSet ? .5 : 1};\n`;\nconst BorderIcon = styled.img`\n  position: absolute;\n  left: 50%;\n  top: -3px;\n  pointer-events: none;\n  transform: translateX(-50%);\n`;\nexport const TalentTooltip = ({\n  level,\n  funcX,\n  x1,\n  x2,\n  funcY,\n  y1,\n  y2,\n  description,\n  name,\n  talentId\n}) => {\n  const mainStat = level > 0 ? growth(funcX, level, x1, x2) : 0;\n  const secondaryStat = level > 0 ? growth(funcY, level, y1, y2) : 0;\n  return <>\n    <Stack direction={'row'} alignItems={'center'} gap={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"styles.jsx\">\n      <img src={`${prefix}data/UISkillIcon${talentId}.png`} alt=\"\" />\n      <Typography fontWeight={'bold'} variant={'h6'} data-sentry-element=\"Typography\" data-sentry-source-file=\"styles.jsx\">{cleanUnderscore(name)}</Typography>\n    </Stack>\n    <Typography data-sentry-element=\"Typography\" data-sentry-source-file=\"styles.jsx\">{cleanUnderscore(description).replace('{', mainStat).replace('}', secondaryStat)}</Typography>\n  </>;\n};\nexport const PlayersList = ({\n  players,\n  characters\n}) => {\n  return <Stack gap={1} direction={'row'} data-sentry-element=\"Stack\" data-sentry-component=\"PlayersList\" data-sentry-source-file=\"styles.jsx\">\n    {players.map(({\n      index\n    }) => <Tooltip key={name + '-head-' + index} title={characters?.[index]?.name}>\n      <img style={{\n        width: 24,\n        height: 24\n      }} src={`${prefix}data/ClassIcons${characters?.[index]?.classIndex}.png`} alt=\"\" />\n    </Tooltip>)}\n  </Stack>;\n};\nexport const MissingData = ({\n  name\n}) => {\n  return <Typography variant={'h3'} data-sentry-element=\"Typography\" data-sentry-component=\"MissingData\" data-sentry-source-file=\"styles.jsx\">Your account is missing data for {name}</Typography>;\n};\nexport const CardTitleAndValue = ({\n  variant,\n  raised,\n  cardSx,\n  imgOnly,\n  imgStyle,\n  title,\n  value,\n  children,\n  icon,\n  tooltipTitle,\n  stackProps,\n  contentPadding\n}) => {\n  return <Tooltip title={tooltipTitle || ''} data-sentry-element=\"Tooltip\" data-sentry-component=\"CardTitleAndValue\" data-sentry-source-file=\"styles.jsx\">\n    <Card variant={variant} raised={raised} sx={{\n      my: {\n        xs: 0,\n        md: 3\n      },\n      width: 'fit-content',\n      ...cardSx\n    }} data-sentry-element=\"Card\" data-sentry-source-file=\"styles.jsx\">\n      <CardContent sx={{\n        '&:last-child': contentPadding ? {\n          p: contentPadding\n        } : {}\n      }} data-sentry-element=\"CardContent\" data-sentry-source-file=\"styles.jsx\">\n        <Stack sx={{\n          display: stackProps ? 'flex' : 'block',\n          ...(stackProps || {})\n        }} data-sentry-element=\"Stack\" data-sentry-source-file=\"styles.jsx\">\n          {title ? <Typography sx={{\n            fontSize: 14\n          }} color=\"text.secondary\" gutterBottom component={'span'}>{title}</Typography> : null}\n          {value || imgOnly ? icon ? <Stack direction={'row'} gap={2} alignItems={'center'}>\n            <img style={{\n              objectFit: 'contain',\n              ...imgStyle\n            }} src={`${prefix}${icon}`} alt=\"\" />\n            {value ? <Typography component={'div'}>{value}</Typography> : null}\n          </Stack> : <Typography component={'div'}>{value}</Typography> : children}\n        </Stack>\n      </CardContent>\n    </Card>\n  </Tooltip>;\n};\nexport const Breakdown = ({\n  breakdown,\n  titleStyle = {},\n  notation = 'Big'\n}) => {\n  return <>\n    {breakdown?.map(({\n      name,\n      value,\n      title\n    }, index) => title ? <Typography sx={{\n      fontWeight: 500\n    }} key={`${name}-${index}`}>{title}</Typography> : !name ? <Divider sx={{\n      my: 1,\n      bgcolor: 'black'\n    }} key={`${name}-${index}`} /> : <TitleAndValue key={`${name}-${index}`} titleStyle={{\n      width: 120,\n      ...titleStyle\n    }} title={name} value={!isNaN(value) ? notateNumber(value, notation) : value} />)}\n  </>;\n};\nexport const CenteredStack = ({\n  direction = 'row',\n  children\n}) => {\n  return <Stack gap={1} direction={direction} alignItems={'center'} data-sentry-element=\"Stack\" data-sentry-component=\"CenteredStack\" data-sentry-source-file=\"styles.jsx\">\n    {children}\n  </Stack>;\n};","import React, { useContext, useMemo, useState } from 'react';\nimport { AppContext } from 'components/common/context/AppProvider';\nimport { Card, CardContent, Divider, Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { cleanUnderscore, notateNumber, numberWithCommas, prefix } from 'utility/helpers';\nimport styled from '@emotion/styled';\nimport { getBuildCost, getExtraMaxLevels } from '../../../parsers/construction';\nimport { NextSeo } from 'next-seo';\nimport Timer from '../../../components/common/Timer';\nimport { getAtomBonus } from '../../../parsers/atomCollider';\nimport Tooltip from '../../../components/Tooltip';\nimport Box from '@mui/material/Box';\nimport { TitleAndValue } from '@components/common/styles';\nimport InfoIcon from '@mui/icons-material/Info';\nconst Buildings = () => {\n  const {\n    state\n  } = useContext(AppContext);\n  const [sortBy, setSortBy] = useState('order');\n  const buildSpeed = state?.account?.construction?.totalBuildRate;\n  const atomBonus = getAtomBonus(state?.account, 'Nitrogen_-_Construction_Trimmer');\n  const costCruncher = useMemo(() => state?.account?.towers?.data?.find(tower => tower.index === 5), [state]);\n  const getMaterialCosts = (itemReq, level, maxLevel, bonusInc, costCruncher) => {\n    return itemReq.map(({\n      rawName,\n      name,\n      amount\n    }) => {\n      const math1 = Math.min(0.1, 0.1 * Math.floor((costCruncher.level + 999) / 1000));\n      const math2 = Math.max(0, costCruncher.level - 1);\n      const costReduction = Math.max(0.2, 1 - (math1 + math2 * costCruncher.costInc[0] / 100));\n      if (rawName.includes('Refinery')) {\n        return {\n          rawName,\n          name,\n          amount: Math.floor(costReduction * amount * (level + 1))\n        };\n      } else {\n        return {\n          rawName,\n          name,\n          amount: Math.floor(costReduction * amount * Math.pow(bonusInc + 0.03 - (bonusInc + 0.03 - 1.05) * level / (maxLevel / 2 + level), level))\n        };\n      }\n    });\n  };\n  const getMaterialCostsToMax = (itemReq, iterations, level, maxLevel, bonusInc, costCruncher) => {\n    let costs = [];\n    for (let i = 0; i < iterations; i++) {\n      const [firstCost, secondCost] = getMaterialCosts(itemReq, level + i, maxLevel, bonusInc, costCruncher);\n      costs[0] = {\n        ...(costs?.[0] ?? firstCost),\n        amount: (costs?.[0]?.amount || 0) + firstCost?.amount\n      };\n      if (secondCost) {\n        costs[1] = {\n          ...(costs?.[1] ?? secondCost),\n          amount: (costs?.[1]?.amount || 0) + secondCost?.amount\n        };\n      }\n    }\n    return costs;\n  };\n  const b = useMemo(() => {\n    return state?.account?.towers?.data?.map(tower => {\n      let {\n        progress,\n        level,\n        maxLevel,\n        bonusInc,\n        itemReq,\n        slot\n      } = tower;\n      const fakeMaxLevel = maxLevel;\n      const items = getMaterialCosts(itemReq, level, maxLevel, bonusInc, costCruncher);\n      const buildCost = getBuildCost(state?.account?.towers, level, bonusInc, tower?.index);\n      const atom = state?.account?.atoms?.atoms?.find(({\n        name\n      }) => name === 'Carbon_-_Wizard_Maximizer');\n      let extraLevels = getExtraMaxLevels(state?.account?.towers?.totalLevels, maxLevel, atom?.level);\n      maxLevel += extraLevels;\n      const allBlueActive = state?.account?.lab.jewels?.slice(3, 7)?.every(({\n        active\n      }) => active) ? 1 : 0;\n      const jewelTrimmedSlot = state?.account?.lab.jewels?.[3]?.active ? 1 + allBlueActive : 0;\n      const trimmedSlots = jewelTrimmedSlot + (atomBonus ? 1 : 0);\n      const isSlotTrimmed = slot !== -1 && slot < trimmedSlots;\n      if (isSlotTrimmed) {\n        const timePassed = (new Date().getTime() - (state?.lastUpdated ?? 0)) / 1000;\n        progress += (3 + atomBonus / 100) * (timePassed / 3600) * buildSpeed;\n      }\n      const trimmedSlotSpeed = (3 + atomBonus / 100) * buildSpeed;\n      const trimmedTimeLeft = (buildCost - progress) / trimmedSlotSpeed * 1000 * 3600;\n      const timeLeft = (buildCost - progress) / buildSpeed * 1000 * 3600;\n      const iterations = maxLevel - level;\n      const itemsMax = getMaterialCostsToMax(itemReq, iterations, level, fakeMaxLevel, bonusInc, costCruncher);\n      return {\n        ...tower,\n        maxLevel,\n        isMaxed: level === maxLevel,\n        isSlotTrimmed,\n        timeLeft,\n        progress,\n        buildCost,\n        items,\n        itemsMax,\n        trimmedSlotSpeed,\n        trimmedTimeLeft\n      };\n    });\n  }, [state?.account]);\n  const sortedBuildings = useMemo(() => {\n    if (sortBy === 'order') return b;else if (sortBy === 'time') {\n      const towers = JSON.parse(JSON.stringify(b));\n      return towers?.sort((a, b) => {\n        const timeLeftA = a?.isSlotTrimmed ? a?.trimmedTimeLeft : a?.timeLeft;\n        const timeLeftB = b?.isSlotTrimmed ? b?.trimmedTimeLeft : b?.timeLeft;\n        if (a?.isMaxed) {\n          return 1;\n        } else if (b?.isMaxed) {\n          return -1;\n        }\n        return timeLeftA - timeLeftB;\n      });\n    } else if (sortBy === 'requirement') {\n      const towers = JSON.parse(JSON.stringify(b));\n      return towers?.sort((a, b) => {\n        if (a?.isMaxed) {\n          return 1;\n        } else if (b?.isMaxed) {\n          return -1;\n        }\n        const buildCostComparison = a?.buildCost - b?.buildCost;\n\n        // If build cost is different, return the comparison result\n        if (buildCostComparison !== 0) {\n          return buildCostComparison;\n        } else {\n          // If build cost is the same, compare progress\n          const progressA = a?.buildCost - a?.progress;\n          const progressB = b?.buildCost - b?.progress;\n          return progressA - progressB;\n        }\n      });\n    }\n  }, [sortBy, state]);\n  const getBorderColor = ({\n    isSlotTrimmed,\n    inProgress\n  }) => {\n    if (isSlotTrimmed) {\n      return 'warning.light';\n    } else if (inProgress) {\n      return 'success.light';\n    }\n    return '';\n  };\n  return <>\n    <NextSeo title=\"Buildings | Idleon Toolbox\" description=\"Keep track of your towers levels, bonuses and required materials for upgrades\" data-sentry-element=\"NextSeo\" data-sentry-source-file=\"buildings.jsx\" />\n    <Stack direction={'row'} alignItems=\"center\" gap={3} flexWrap={'wrap'} mb={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"buildings.jsx\">\n      <Box data-sentry-element=\"Box\" data-sentry-source-file=\"buildings.jsx\">\n        <Typography data-sentry-element=\"Typography\" data-sentry-source-file=\"buildings.jsx\">Sort by</Typography>\n        <ToggleButtonGroup value={sortBy} sx={{\n          mb: 2\n        }} exclusive onChange={(e, newSort) => newSort?.length > 0 && setSortBy(newSort)} data-sentry-element=\"ToggleButtonGroup\" data-sentry-source-file=\"buildings.jsx\">\n          <ToggleButton value={'order'} data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"buildings.jsx\">Order</ToggleButton>\n          <ToggleButton value={'time'} data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"buildings.jsx\">Time left</ToggleButton>\n          <ToggleButton value={'requirement'} data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"buildings.jsx\">Build cost</ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      <CardTitleAndValue title={'Build Speed'} value={notateNumber(buildSpeed, 'Big')} data-sentry-element=\"CardTitleAndValue\" data-sentry-source-file=\"buildings.jsx\" />\n      <CardTitleAndValue title={'Trimmed Build Speed'} value={notateNumber((3 + atomBonus / 100) * buildSpeed, 'Big')} breakdown={[{\n        name: 'Base (jewel)',\n        value: state?.account?.lab.jewels?.[3] ? Math.ceil(state?.account?.lab.jewels?.[3]?.bonus * state?.account?.lab.jewels?.[3]?.multiplier) : 3\n      }, {\n        name: 'Atom',\n        value: atomBonus / 100\n      }]} data-sentry-element=\"CardTitleAndValue\" data-sentry-source-file=\"buildings.jsx\" />\n    </Stack>\n    <Stack direction={'row'} flexWrap={'wrap'} gap={3} data-sentry-element=\"Stack\" data-sentry-source-file=\"buildings.jsx\">\n      {sortedBuildings?.map((tower, index) => {\n        let {\n          name,\n          progress,\n          level,\n          maxLevel,\n          inProgress,\n          isSlotTrimmed,\n          isMaxed,\n          items,\n          itemsMax,\n          buildCost,\n          timeLeft,\n          trimmedTimeLeft\n        } = tower;\n        return <Card key={`${name}-${index}`} sx={{\n          border: inProgress || isSlotTrimmed ? '1px solid' : '',\n          borderColor: getBorderColor(tower),\n          width: {\n            xs: '100%',\n            md: 450\n          },\n          height: {\n            md: 165\n          }\n        }}>\n          <CardContent>\n            <Stack direction={'row'} justifyContent={'space-around'} flexWrap={'wrap'}>\n              <Stack alignItems={'center'} sx={{\n                textAlign: 'center'\n              }}>\n                <Typography>{cleanUnderscore(name)}</Typography>\n                <TowerIcon src={`${prefix}data/ConTower${tower?.index}.png`} alt=\"\" />\n                <Typography>Lv. {level} / {maxLevel}</Typography>\n                {isMaxed ? <Typography color={'success.light'}>Maxed</Typography> : <Tooltip title={<>\n                    <Typography>Progress: {numberWithCommas(Math.floor(progress))}</Typography>\n                    <Typography>Requirement: {numberWithCommas(Math.floor(buildCost))}</Typography>\n                  </>}>\n                    <Typography>{notateNumber(progress, 'Big')} / {notateNumber(buildCost, 'Big')}</Typography>\n                  </Tooltip>}\n\n              </Stack>\n              {!isMaxed ? <Stack gap={1} divider={<Divider flexItem />}>\n                <Stack>\n                  {!isMaxed ? <TitleAndValue title={'Non-trimmed'} titleStyle={{\n                    color: !isSlotTrimmed && '#81c784'\n                  }} value={<Timer type={'countdown'} staticTime={true} placeholder={'Ready!'} date={new Date().getTime() + timeLeft} lastUpdated={state?.lastUpdated} />} /> : null}\n                  {!isMaxed ? <TitleAndValue title={'Trimmed'} titleStyle={{\n                    color: isSlotTrimmed && '#81c784'\n                  }} value={<Timer type={'countdown'} placeholder={'Ready!'} staticTime={true} date={new Date().getTime() + trimmedTimeLeft} lastUpdated={state?.lastUpdated} />} /> : null}\n\n                </Stack>\n                <Stack direction={'row'} divider={<Divider orientation={'vertical'} flexItem />} gap={2}>\n                  <ReqItemsDisplay title={'Next'} isMaxed={isMaxed} items={items} />\n                  <ReqItemsDisplay title={'Max'} isMaxed={isMaxed} items={itemsMax} />\n                </Stack>\n              </Stack> : null}\n            </Stack>\n          </CardContent>\n        </Card>;\n      })}\n    </Stack>\n  </>;\n};\nconst ReqItemsDisplay = ({\n  title,\n  isMaxed,\n  items\n}) => {\n  if (isMaxed) return null;\n  return <Stack data-sentry-element=\"Stack\" data-sentry-component=\"ReqItemsDisplay\" data-sentry-source-file=\"buildings.jsx\">\n    <Typography variant={'body2'} color={'text.secondary'} data-sentry-element=\"Typography\" data-sentry-source-file=\"buildings.jsx\">{title}</Typography>\n    <Stack direction={'row'} gap={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"buildings.jsx\">\n      {items?.map(({\n        rawName,\n        amount\n      }, itemIndex) => {\n        return <Stack alignItems={'center'} key={`${name}-${rawName}-${itemIndex}`}>\n          <ItemIcon src={`${prefix}data/${rawName}.png`} alt=\"\" />\n          <Typography>{notateNumber(amount, 'Big')}</Typography>\n        </Stack>;\n      })}\n    </Stack>\n  </Stack>;\n};\nconst TowerIcon = styled.img`\n  width: 50px;\n  height: 50px;\n  object-fit: contain;\n`;\nconst ItemIcon = styled.img`\n  width: 35px;\n  height: 35px;\n  object-fit: contain;\n`;\nconst CardTitleAndValue = ({\n  cardSx,\n  title,\n  value,\n  children,\n  breakdown\n}) => {\n  return <Card sx={{\n    my: {\n      xs: 0,\n      md: 3\n    },\n    width: 'fit-content',\n    ...cardSx\n  }} data-sentry-element=\"Card\" data-sentry-component=\"CardTitleAndValue\" data-sentry-source-file=\"buildings.jsx\">\n    <CardContent data-sentry-element=\"CardContent\" data-sentry-source-file=\"buildings.jsx\">\n      <Typography sx={{\n        fontSize: 14\n      }} color=\"text.secondary\" gutterBottom data-sentry-element=\"Typography\" data-sentry-source-file=\"buildings.jsx\">{title}</Typography>\n      <Stack direction={'row'} gap={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"buildings.jsx\">\n        {value ? <Typography>{value}</Typography> : children}\n        {breakdown ? <Tooltip title={<Stack>\n          {breakdown?.map(({\n            name,\n            value\n          }, index) => <TitleAndValue key={`${name}-${index}`} title={name} value={!isNaN(value) ? `${notateNumber(value, 'MultiplierInfo').replace('.00', '')}x` : value} />)}\n\n        </Stack>}>\n          <InfoIcon></InfoIcon>\n        </Tooltip> : null}\n      </Stack>\n    </CardContent>\n  </Card>;\n};\nexport default Buildings;"],"names":["window","__NEXT_P","push","__webpack_require__","Timer","forwardRef","param","ref","date","startDate","lastUpdated","stopAtZero","type","pause","staticTime","placeholder","loop","variant","rest","time","setTime","useState","useEffect","isFinite","getDuration","Date","getTime","tempTime","timePassed","dateIsInPast","isPast","overtime","tickUp","days","hours","minutes","seconds","tickDown","useInterval","wrapNumber","number","strNumber","String","length","concat","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Typography","jsxs","sx","color","component","__webpack_exports__","Z","IconWithText","props","stat","icon","img","title","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Tooltip","Stack","alignItems","style","position","width","src","prefix","alt","displayName","TitleAndValue","value","boldTitle","titleStyle","valueStyle","direction","flexWrap","data-sentry-element","data-sentry-component","data-sentry-source-file","fontWeight","fontSize","StyledBadge","styled","Badge","CardAndBorder","cardProps","cardName","stars","cardIndex","name","rawName","amount","nextLevelReq","iconSrc","Fragment","BorderIcon","CardTooltip","CardIcon","isCardSet","effect","bonus","showInfo","realBonus","calcCardBonus","cleanUnderscore","replace","mt","gap","map","_","index","justifyContent","StarIcon","numberWithCommas","_templateObject1","_templateObject2","_templateObject3","TalentTooltip","level","funcX","x1","x2","funcY","y1","y2","description","talentId","mainStat","growth","secondaryStat","PlayersList","players","characters","height","classIndex","MissingData","CardTitleAndValue","raised","cardSx","imgOnly","imgStyle","children","tooltipTitle","stackProps","contentPadding","Card","my","xs","md","CardContent","p","display","gutterBottom","objectFit","Breakdown","breakdown","notation","notateNumber","Divider","bgcolor","CenteredStack","ReqItemsDisplay","isMaxed","items","itemIndex","ItemIcon","TowerIcon","_templateObject","InfoIcon","state","useContext","AppContext","sortBy","setSortBy","buildSpeed","account","construction","totalBuildRate","atomBonus","getAtomBonus","costCruncher","useMemo","towers","data","find","tower","getMaterialCosts","itemReq","maxLevel","bonusInc","math1","Math","min","floor","math2","max","costReduction","costInc","includes","pow","getMaterialCostsToMax","iterations","costs","i","firstCost","secondCost","b","progress","slot","fakeMaxLevel","buildCost","getBuildCost","atom","atoms","extraLevels","getExtraMaxLevels","totalLevels","allBlueActive","lab","jewels","slice","every","active","jewelTrimmedSlot","trimmedSlots","isSlotTrimmed","trimmedSlotSpeed","trimmedTimeLeft","timeLeft","itemsMax","sortedBuildings","JSON","parse","stringify","sort","a","timeLeftA","timeLeftB","buildCostComparison","progressA","progressB","getBorderColor","inProgress","NextSeo","mb","Box","ToggleButtonGroup","exclusive","onChange","e","newSort","ToggleButton","ceil","multiplier","border","borderColor","textAlign","divider","flexItem","orientation"],"sourceRoot":""}