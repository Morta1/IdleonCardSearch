{"version":3,"file":"static/chunks/6886-69b76131b70cdbb6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/material/Grid/GridContext.js","webpack://_N_E/./node_modules/@mui/material/Grid/gridClasses.js","webpack://_N_E/./node_modules/@mui/material/Grid/Grid.js","webpack://_N_E/<anon>"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst GridContext = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\nexport default GridContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',\n// spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`),\n// direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`),\n// wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`),\n// grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","'use client';\n\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport requirePropFactory from \"../utils/requirePropFactory.js\";\nimport styled from \"../styles/styled.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport useTheme from \"../styles/useTheme.js\";\nimport GridContext from \"./GridContext.js\";\nimport gridClasses, { getGridUtilityClass } from \"./gridClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n    if (!size) {\n      return globalStyles;\n    }\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      }\n      // Keep 7 significant numbers.\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${themeSpacing})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      }\n\n      // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n      styles = {\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width,\n        ...more\n      };\n    }\n\n    // No need for a media query for the first size.\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.startsWith('column')) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\n\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `calc(-1 * ${themeSpacing})`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: themeSpacing\n          }\n        };\n      }\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        const negativeValue = `calc(-1 * ${themeSpacing})`;\n        return {\n          width: `calc(100% + ${themeSpacing})`,\n          marginLeft: negativeValue,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: themeSpacing\n          }\n        };\n      }\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  }\n  // in case of object `spacing`\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = [];\n\n    // in case of grid item\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(\n// FIXME(romgrk): Can't use memoTheme here\n({\n  ownerState\n}) => ({\n  boxSizing: 'border-box',\n  ...(ownerState.container && {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  }),\n  ...(ownerState.item && {\n    margin: 0 // For instance, it's useful when used with a `figure` element.\n  }),\n  ...(ownerState.zeroMinWidth && {\n    minWidth: 0\n  }),\n  ...(ownerState.wrap !== 'wrap' && {\n    flexWrap: ownerState.wrap\n  })\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  }\n  // in case of object `spacing`\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = [];\n\n  // in case of grid item\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\n/**\n * @deprecated Use the [`Grid2`](https://mui.com/material-ui/react-grid2/) component instead.\n */\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useDefaultProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    rowSpacing: rowSpacingProp,\n    spacing = 0,\n    wrap = 'wrap',\n    zeroMinWidth = false,\n    ...other\n  } = props;\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext);\n\n  // columns set with default breakpoint unit of 12\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = {\n    ...other\n  };\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = {\n    ...props,\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing,\n    ...breakpointsValues,\n    breakpoints: breakpoints.keys\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref,\n      ...otherFiltered\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid);\n  // eslint-disable-next-line no-useless-concat\n  Grid['propTypes' + ''] = {\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    ...Grid.propTypes,\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  };\n}\nexport default Grid;"],"names":["GridContext","react","createContext","getGridUtilityClass","slot","generateUtilityClass","ZP","GRID_SIZES","gridClasses","generateUtilityClasses","Z","SPACINGS","map","spacing","DIRECTIONS","direction","WRAPS","wrap","size","generateGrid","theme","ownerState","breakpoints","keys","reduce","globalStyles","breakpoint","styles","flexBasis","flexGrow","maxWidth","flexShrink","width","columnsBreakpointValues","P$","values","columns","columnValue","Math","round","more","container","item","columnSpacing","themeSpacing","fullWidth","Object","assign","up","generateDirection","directionValues","k9","propValue","output","flexDirection","startsWith","Grid_gridClasses","extractZeroValueBreakpointKeys","nonZeroKey","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","indexOf","generateRowGap","rowSpacing","zeroValueBreakpointKeys","rowSpacingValues","marginTop","paddingTop","includes","generateColumnGap","columnSpacingValues","negativeValue","marginLeft","paddingLeft","resolveSpacingStyles","Number","isNaN","String","spacingStyles","value","push","GridRoot","styled","name","overridesResolver","props","zeroMinWidth","breakpointsStyles","root","boxSizing","display","flexWrap","margin","minWidth","resolveSpacingClasses","classes","className","useUtilityClasses","spacingClasses","breakpointsClasses","slots","composeClasses","Grid","forwardRef","inProps","ref","themeProps","DefaultPropsProvider","i","useTheme","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","other","columnsContext","useContext","breakpointsValues","otherFiltered","jsx_runtime","jsx","Grid_GridContext","Provider","children","clsx","as","Grid_Grid"],"sourceRoot":""}